# ______ Environment Variables _______

export HISTFILE=~/.zsh_history
export HISTSIZE=100000
export SAVEHIST=100000

export CASE_SENSITIVE="false"
export HYPHEN_INSENSITIVE="false"

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"

export HOMEBREW_NO_AUTO_UPDATE=1  # Disable homebrew auto update on install

eval "$(pyenv init --path)"
eval "$(pyenv init -)"

. "$HOME/.local/bin/env"

# _______ Aliases _______

# git 
alias gl='git pull'
alias gp='git push'
alias gs='git status'
alias ga='git add'
alias gco='git checkout'
alias gcom='git commit -m'
alias gb='git branch'

# pytest 
alias pt='pytest'

# _______ ZSH setup _______

# command history
setopt appendhistory
setopt inc_append_history
setopt share_history

# autocompletion behavior

# Ignore these everywhere except for rm
zstyle ':completion:*:*:*' ignored-patterns '(|*/)__pycache__' \
    '(|*/)*.egg-info' '(*/)#lost+found'
zstyle ':completion:*:rm:*' ignored-patterns '(|*/)*.egg-info'

# Set accept-exact-dirs for cases of mounted drives (Google Drive or S3-bucket)
# to avoid slow down searching on parent directory
# https://github.com/ohmyzsh/ohmyzsh/issues/7348
zstyle ':completion:*' accept-exact-dirs true

# matches case insensitive for lowercase
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# rehash if command not found (possibly recently installed)
zstyle ':completion:*' rehash true

# bind keys
_CUSTOM_WORDCHARS='*?_[]~=&;!#$%^(){}<>'

# backward and forward word with option+left/right
tcsh-backward-word () {
  local WORDCHARS=_CUSTOM_WORDCHARS
  zle backward-word
}
zle -N tcsh-backward-word
bindkey '^[b' tcsh-backward-word
tcsh-forward-word () {
  local WORDCHARS=_CUSTOM_WORDCHARS
  zle forward-word
}
zle -N tcsh-forward-word
bindkey '^[f' tcsh-forward-word

# backward and forward word with ctrl+left/right
bindkey '^[[1;5D' backward-word
bindkey '^[[1;5C' forward-word

# https://superuser.com/questions/1421423/how-to-bind-option-delete-to-backward-delete-word-in-zsh-vi-mode-in-tmux-and-ala
# Ensure having same behaviour in tmux
bindkey '^W' backward-kill-word

# Delete word with option+backspace with more word delimiters
# https://www.zsh.org/mla/users/2001/msg00870.html
tcsh-backward-delete-word () {
  local WORDCHARS=_CUSTOM_WORDCHARS
  zle backward-delete-word
}
zle -N tcsh-backward-delete-word
bindkey '^[^H' tcsh-backward-delete-word

# delete char
bindkey "^[[3~" delete-char

# beginning / end of line
bindkey '^A' beginning-of-line
bindkey '^E' end-of-line

# edit command line in $EDITOR
bindkey '^X' edit-command-line

# Hist search
# bindkey '^r' history-incremental-search-backward
# bindkey '^R' history-incremental-pattern-search-backward

# Hist search completion of line with arrows up and down using ohmyzsh history-substring-search
zle -N history-substring-search-up
zle -N history-substring-search-down
bindkey "^[[A" history-substring-search-up
bindkey "^[[B" history-substring-search-down

# Bind ctrl + space
bindkey '^ ' autosuggest-accept

# _______ OhMyZsh _______

if [ ! -d $HOME/.oh-my-zsh ]; then
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh) --keep-zshrc"
fi

_zsh_custom_plugin_path=${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins

_zsh_autosuggestion_path=${_zsh_custom_plugin_path}/zsh-autosuggestions
if [ ! -d $_zsh_autosuggestion_path ]; then
  git clone https://github.com/zsh-users/zsh-autosuggestions $_zsh_autosuggestion_path
fi

_zsh_syntax_highlighting_path=${_zsh_custom_plugin_path}/zsh-syntax-highlighting
if [ ! -d $_zsh_syntax_highlighting_path ]; then
  git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $_zsh_syntax_highlighting_path
fi

plugins=(
  git
  zsh-autosuggestions
  zsh-syntax-highlighting
  macos
)

export ZSH_THEME=cloud

export ZSH="$HOME/.oh-my-zsh"
source $ZSH/oh-my-zsh.sh

autoload -Uz compinit && compinit  # after plugins definition
zstyle ':omz:update' frequency 5

# _______ other _______

export PATH="/opt/homebrew/bin:$PATH"

# If inside tmux, sync SSH agent env from tmux global env
if [ -n "$TMUX" ]; then
  eval "$(tmux show-environment -s SSH_AUTH_SOCK 2>/dev/null)"
  eval "$(tmux show-environment -s SSH_AGENT_PID 2>/dev/null)"
fi

#fzf config
if command -v fzf &> /dev/null; then
  source <(fzf --zsh)
fi